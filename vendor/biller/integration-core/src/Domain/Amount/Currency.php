<?php

namespace Biller\Domain\Amount;

use Biller\Domain\Exceptions\InvalidCurrencyCode;

/**
 * Class Currency
 *
 * @package Biller\Domain\Amount
 */
class Currency
{
    const DEFAULT_MINOR_UNITS = 2;
    const DEFAULT_CURRENCY = 'EUR';

    private static $supportedCurrencies = ['EUR', 'DKK', 'GBP'];

    /**
     * Mapping between all the currencies and their respective amount minor units.
     *
     * This static property is automatically generated by running the
     * php biller generate-currency-amount-map command.
     *
     * @var array
     */
    /* <auto-generated> */
    private static $map = [
        'BHD' => 3,
        'XOF' => 0,
        'BIF' => 0,
        'XAF' => 0,
        'CLP' => 0,
        'CLF' => 4,
        'KMF' => 0,
        'DJF' => 0,
        'XPF' => 0,
        'GNF' => 0,
        'ISK' => 0,
        'IQD' => 3,
        'JPY' => 0,
        'JOD' => 3,
        'KRW' => 0,
        'KWD' => 3,
        'LYD' => 3,
        'OMR' => 3,
        'PYG' => 0,
        'RWF' => 0,
        'TND' => 3,
        'UGX' => 0,
        'UYI' => 0,
        'UYW' => 4,
        'VUV' => 0,
        'VND' => 0,
    ];
    /* </auto-generated> */

    /**
     * @var string
     */
    private $isoCode;

    /**
     * @param string $isoCode
     */
    private function __construct($isoCode)
    {
        $this->isoCode = strtoupper($isoCode);
    }

    /**
     * @return string
     */
    public function getIsoCode()
    {
        return $this->isoCode;
    }

    /**
     * @throws InvalidCurrencyCode
     */
    public static function fromIsoCode($code)
    {
        if (strlen($code) !== 3) {
            throw new InvalidCurrencyCode("Invalid currency code $code provided. The three-letter ISO currency is expected (e.g. 'EUR').");
        }

        if (!in_array($code, self::$supportedCurrencies, true)) {
            throw new InvalidCurrencyCode("The currency code '$code' is not supported by the Biller.");
        }

        return new self($code);
    }
    /**
     * Return default currency
     */
    public static function getDefault()
    {
        return new self(self::DEFAULT_CURRENCY);
    }

    /**
     * Returns the number of minor units for the provided currency.
     *
     * @return int
     */
    public function getMinorUnits()
    {
        if (!array_key_exists($this->getIsoCode(), static::$map)) {
            return static::DEFAULT_MINOR_UNITS;
        }

        return static::$map[$this->getIsoCode()];
    }

    public function __toString()
    {
        return $this->isoCode;
    }

    /**
     * Is two currencies same
     *
     * @param Currency $currency
     * @return bool
     */
    public function equal(Currency $currency)
    {
        return $this->isoCode === $currency->getIsoCode();
    }
}